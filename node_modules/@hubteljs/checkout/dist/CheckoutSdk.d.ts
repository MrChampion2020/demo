interface PurchaseInfo {
    /**
     * @requires
     * The amount to be paid.
     */
    amount: number;
    /**
     * @requires
     * The description of the purchase.
     */
    purchaseDescription: string;
    /**
     * @requires
     * The phone number of the customer.
     */
    customerPhoneNumber: string;
    /**
     * @requires
     * The client reference.
     */
    clientReference: string;
}
interface Config {
    /**
     * @optional
     * @default "enabled"
     * The branding option. If enabled, the merchant name will display at the top payment channels.
    */
    branding?: "enabled" | "disabled";
    /**
     * @requires
     * The URL to which the payment response will be sent.
     */
    callbackUrl: string;
    /**
     * @optional
     * The branch ID. This is required for internal integrations.
     */
    branchId?: string;
    /**
     * @optional
     * The business ID. This is required for internal integrations.
     */
    businessId?: string;
    /**
     * @optional
     * The bearer token of the user making the payment. This is required for internal integrations.
     */
    bearerToken?: string;
    merchantAccount?: number;
    /**
     * @optional
     * The basic authentication token. This is required for external integrations.
     */
    basicAuth?: string;
    /**
     * @requires
     * The integration type. This can be either "Internal" or "External".
     */
    integrationType?: "Internal" | "External" | null;
}
interface Initiate {
    /**
     * A boolean value indicating whether the checkout has been initialized.
     */
    initialized: boolean;
}
interface PaymentSuccess {
    /**
     * A boolean value indicating whether the payment was successful.
     */
    success: boolean;
    /**
     * The mobile number of the customer.
     */
    mobileNumber: string;
    /**
     * The json string of payment data.
     */
    data: string;
}
interface PaymentFailure {
    /**
     * A boolean value indicating whether the payment was successful.
     */
    success: boolean;
    /**
     * A message indicating the reason for the payment failure.
    */
    message: string;
    /**
     * The mobile number of the customer.
     */
    mobileNumber: string;
    /**
     * The json string of payment data.
     */
    data: string;
}
interface Callbacks {
    /**
   * A callback function that is called when the checkout is initialized.
   * @param data - The data object.
   * @returns
   */
    onInit?: (data: Initiate) => void;
    /**
     * A callback function that is called when the payment is successful.
     * @param data
     */
    onPaymentSuccess?: (data: PaymentSuccess) => void;
    /**
     * A callback function that is called when the payment fails.
     * @param data
     */
    onPaymentFailure?: (data: PaymentFailure) => void;
    /**
     * A callback function that is called when the iframe is loaded.
     */
    onLoad?: () => void;
    /**
     * A callback function that is called when the fees are changed.
     * @param fees - A json string representing the new fees.
     */
    onFeesChanged?: (fees: string) => void;
    /**
     * A callback function that is called when the iframe is resized.
     * @param data - The data object.
     */
    onResize?: (data: any) => void;
    /**
     * A callback function that is called when the checkout modal is closed.
     */
    onClose?: () => void;
    /**
     * A callback function that is called when the checkout is initialized.
     * @param data - The data object.
     * @returns
     */
    init?: (data: any) => void;
}
interface IframeStyle {
    width?: string;
    height?: string;
    border?: string;
    minHeight?: string;
}
/**
 * The `CheckoutSdk` class provides methods for redirecting to the checkout page,
 * initializing an iframe for checkout, opening a modal for checkout, and closing the modal.
 */
declare class CheckoutSdk {
    private baseUrl;
    constructor(url?: string);
    /**
   * Redirects the user to the checkout page with the provided purchase information and configuration.
   * @param purchaseInfo - The purchase information.
   * @param config - The configuration.
   */
    redirect({ purchaseInfo, config }: {
        purchaseInfo: PurchaseInfo;
        config: Config;
    }): void;
    /**
  * Initializes the iframe for the checkout process.
  *
  * @param options - The options for initializing the iframe.
  * @param options.purchaseInfo - The purchase information.
  * @param options.callBacks - The callback functions.
  * @param options.config - The configuration settings.
  * @param options.iframeStyle - The style options for the iframe (optional).
  */
    initIframe({ purchaseInfo, callBacks, config, iframeStyle, }: {
        purchaseInfo: PurchaseInfo;
        callBacks: Callbacks;
        config: Config;
        iframeStyle?: IframeStyle;
    }): void;
    openModal({ purchaseInfo, callBacks, config, }: {
        purchaseInfo: PurchaseInfo;
        callBacks: Callbacks;
        config: Config;
    }): void;
    private createCheckoutUrl;
    private createIframe;
    private encodeBase64;
    private handleBackButton;
    private registerEvents;
    private renderWebpageInPopup;
    closePopUp(): void;
    private injectStyles;
}
export default CheckoutSdk;
