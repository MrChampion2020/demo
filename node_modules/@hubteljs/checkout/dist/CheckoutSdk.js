"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The `CheckoutSdk` class provides methods for redirecting to the checkout page,
 * initializing an iframe for checkout, opening a modal for checkout, and closing the modal.
 */
class CheckoutSdk {
    constructor(url) {
        this.baseUrl = "https://unified-pay.hubtel.com";
        if (url)
            this.baseUrl = url;
    }
    /**
   * Redirects the user to the checkout page with the provided purchase information and configuration.
   * @param purchaseInfo - The purchase information.
   * @param config - The configuration.
   */
    redirect({ purchaseInfo, config }) {
        const url = this.createCheckoutUrl(purchaseInfo, config);
        window.open(url);
    }
    /**
  * Initializes the iframe for the checkout process.
  *
  * @param options - The options for initializing the iframe.
  * @param options.purchaseInfo - The purchase information.
  * @param options.callBacks - The callback functions.
  * @param options.config - The configuration settings.
  * @param options.iframeStyle - The style options for the iframe (optional).
  */
    initIframe({ purchaseInfo, callBacks, config, iframeStyle, }) {
        var _a, _b, _c;
        this.registerEvents(callBacks);
        const iframeContainer = document.getElementById("hubtel-checkout-iframe");
        if (!iframeContainer)
            return;
        iframeContainer.innerHTML = "";
        const loadingIcon = document.createElement("div");
        loadingIcon.textContent = "Loading...";
        iframeContainer.appendChild(loadingIcon);
        const iframe = document.createElement("iframe");
        iframe.setAttribute("id", "hubtel-iframe-element");
        iframe.src = this.createCheckoutUrl(purchaseInfo, config);
        iframe.style.display = "none";
        iframe.style.width = (_a = iframeStyle === null || iframeStyle === void 0 ? void 0 : iframeStyle.width) !== null && _a !== void 0 ? _a : "100%";
        iframe.style.height = (_b = iframeStyle === null || iframeStyle === void 0 ? void 0 : iframeStyle.height) !== null && _b !== void 0 ? _b : "100%";
        iframe.style.minHeight = (iframeStyle === null || iframeStyle === void 0 ? void 0 : iframeStyle.minHeight) || "400px";
        iframe.style.border = (_c = iframeStyle === null || iframeStyle === void 0 ? void 0 : iframeStyle.border) !== null && _c !== void 0 ? _c : "none";
        iframe.onload = () => {
            var _a;
            iframeContainer.removeChild(loadingIcon);
            iframe.style.display = "block";
            (_a = callBacks.onLoad) === null || _a === void 0 ? void 0 : _a.call(callBacks);
        };
        iframeContainer.appendChild(iframe);
    }
    openModal({ purchaseInfo, callBacks, config, }) {
        this.injectStyles();
        this.createIframe();
        this.handleBackButton();
        this.registerEvents(callBacks);
        this.renderWebpageInPopup(this.createCheckoutUrl(purchaseInfo, config), callBacks.onClose, callBacks.onLoad);
    }
    createCheckoutUrl(purchaseInfo, config) {
        const checkoutData = Object.assign(Object.assign({}, purchaseInfo), config);
        const filteredData = Object.keys(checkoutData).reduce((acc, key) => {
            if (checkoutData[key] !== null && checkoutData[key] !== undefined) {
                acc[key] = checkoutData[key];
            }
            return acc;
        }, {});
        const queryString = Object.keys(filteredData)
            .map((key) => `${key}=${encodeURIComponent(filteredData[key])}`)
            .join("&");
        const encodedQuery = this.encodeBase64(queryString);
        const encryptedTarget = encodeURIComponent(encodedQuery);
        const url = (filteredData === null || filteredData === void 0 ? void 0 : filteredData.branding) === "disabled"
            ? `${this.baseUrl}/pay/direct`
            : `${this.baseUrl}/pay`;
        return `${url}?p=${encryptedTarget}`;
    }
    createIframe() {
        let backdrop = document.createElement("div");
        backdrop.setAttribute("id", "backdrop");
        backdrop.classList.add("backdrop");
        const loader = document.createElement("span");
        loader.classList.add("checkout-loader");
        backdrop.appendChild(loader);
        document.body.appendChild(backdrop);
    }
    encodeBase64(data) {
        return btoa(unescape(encodeURIComponent(data)));
    }
    handleBackButton() {
        window.addEventListener("popstate", (event) => {
            this.closePopUp();
        });
    }
    registerEvents(callBacks) {
        const handleMessage = (event) => {
            var _a, _b, _c, _d, _e, _f;
            if (event.origin !== this.baseUrl)
                return;
            const { data } = event;
            if (data.success === true) {
                (_a = callBacks.onPaymentSuccess) === null || _a === void 0 ? void 0 : _a.call(callBacks, data);
            }
            else if (data.success === false) {
                (_b = callBacks.onPaymentFailure) === null || _b === void 0 ? void 0 : _b.call(callBacks, data);
            }
            else if (data.initialized) {
                (_c = callBacks.init) === null || _c === void 0 ? void 0 : _c.call(callBacks, data);
                (_d = callBacks.onInit) === null || _d === void 0 ? void 0 : _d.call(callBacks, data);
            }
            else if (data.feesChanged) {
                (_e = callBacks.onFeesChanged) === null || _e === void 0 ? void 0 : _e.call(callBacks, data.fees);
            }
            else if (data.resize) {
                const iframe = document.getElementById("hubtel-iframe-element");
                if (iframe) {
                    iframe.style.height = data.height + "px";
                }
                (_f = callBacks === null || callBacks === void 0 ? void 0 : callBacks.onResize) === null || _f === void 0 ? void 0 : _f.call(callBacks, data);
            }
        };
        window.addEventListener("message", handleMessage, false);
    }
    renderWebpageInPopup(url, onClose, onLoad) {
        const modal = document.createElement("div");
        modal.classList.add("checkout-modal");
        const closeIcon = document.createElement("div");
        closeIcon.setAttribute("id", "checkout-close-icon");
        closeIcon.innerHTML = "&times;";
        closeIcon.classList.add("close-icon");
        closeIcon.addEventListener("click", () => {
            this.closePopUp();
            onClose === null || onClose === void 0 ? void 0 : onClose();
        });
        modal.appendChild(closeIcon);
        const iframe = document.createElement("iframe");
        iframe.src = url;
        history.pushState({ modalOpen: true }, "");
        iframe.classList.add("iframe");
        modal.appendChild(iframe);
        document.body.appendChild(modal);
        modal.style.opacity = "0";
        iframe.addEventListener("load", () => {
            modal.style.opacity = "1";
            onLoad === null || onLoad === void 0 ? void 0 : onLoad();
        });
    }
    closePopUp() {
        const backdrop = document.querySelector(".backdrop");
        const modal = document.querySelector(".checkout-modal");
        if (backdrop) {
            document.body.removeChild(backdrop);
        }
        if (modal) {
            document.body.removeChild(modal);
        }
        history.replaceState(null, "");
        window.removeEventListener("popstate", this.closePopUp);
    }
    injectStyles() {
        const style = document.createElement("style");
        style.type = "text/css";
        style.innerHTML = `
        .backdrop {
            position: fixed;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 2147483647;
        }

        .loader {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 10000;
            /* Your loader styles */
        }

        .checkout-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            height: 90%;
            padding-top: 20px;
            max-width: 480px;
            background-color: #fff;
            border-radius: 10px;
            z-index: 65675656565;
            transition: opacity 0.5s ease, transform 0.5s ease;
            opacity: 0;
        }

        .close-icon {
            position: absolute;
            top: 10px;
            width: 25px;
            height: 25px;
            font-size: 20px;
            right: 10px;
            cursor: pointer;
            color: #fff;
            background-color: #000;
            text-align: center;
            border-radius: 50%;
        }

        .iframe {
            width: 100%;
            height: calc(100% - 20px);
            border: none;
        }

        .checkout-loader {
          width: 30px;
          height: 30px;
          border: 3px solid #FFF;
          border-bottom-color: #42b883;
          border-radius: 50%;
          display: inline-block;
          box-sizing: border-box;
          position : fixed;
          top : 50%;
          left : 50%;
          transform : translate(-50%, -50%); 
          z-index : 10000;
          animation: rotation 1s linear infinite;
      }

      @keyframes rotation {
          0% {
              transform: rotate(0deg);
          }
          100% {
              transform: rotate(360deg);
          }
      }

      @media screen and (max-width: 600px) {
          .checkout-modal {
              width: 100%;
              height: 100%;
              border-radius: 0;
              padding-bottom: 0px;
              padding-top: 0px;
          }
          .close-icon{
            top: 10px;
            right: 15px;
          }

          .iframe {
            
            height: 100%;
         
        }
      }
    `;
        document.head.appendChild(style);
    }
}
exports.default = CheckoutSdk;
